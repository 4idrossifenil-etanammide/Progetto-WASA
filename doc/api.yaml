openapi: 3.0.3
info:
  title:  WASA Photo
  description: |
    WASAPhoto REST APIs
  version: "1.0.0"

tags:
  - name: login
    description: Describe the login operation
  - name: profile
    description: Describe the operation on profile
  - name: banned
    description: Describe the operation for banning users
  - name: follower
    description: Describe the operation for following users
  - name: photo
    description: Describe the operation on the photo
  - name: likes
    description: Describe the operation for liking/unliking a photo
  - name: comments
    description: Describe the operation for comment/uncomment a photo

paths:
  /session:
    post:
      tags:
        - login
      summary: Logs in the user
      description: |
        If the user does not exist, it will be created, and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/user_name'
        required: true
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ID'
        '400': { $ref: "#/components/responses/BadRequest" }
        '500': { $ref: "#/components/responses/InternalServerError" }
                
  /profiles/{user_name}:
    parameters:
      - name: user_name
        in: path
        description: Describe the user name
        required: true
        schema:
          type: string
          example: Maria
          minLength: 3
          maxLength: 16
          pattern: '^.*?$'
    get:
      tags:
        - profile
      operationId: getUserProfile
      summary: Get user profiles 
      description: A user can search other user profiles via user_name
      responses:
        "200":
          description: The user profile
          content:
            application/json:
              schema:
                 $ref: "#/components/schemas/profile"
        "400": { $ref: "#/components/responses/BadRequest" }
                 
  /profiles/{user_name}/name:
    parameters:
      - name: user_name
        in: path
        description: Describe the user name
        required: true
        schema:
          type: string
          example: Maria
          minLength: 3
          maxLength: 16
          pattern: '^.*?$'      
    put:
      tags:
        - profile
      operationId: setMyUserName
      summary: Set the user name
      description: Replace a name for the given user name
      requestBody:
        required: true
        description: The new name for the given user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user_name'
      responses:
        "204":
          description: The user_name was successfully changed
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "500": { $ref: "#/components/responses/InternalServerError" }
          
  /profiles/{user_name}/banned/{banned_user}:
    parameters:
      - name: user_name
        in: path
        description: Describe the user name
        required: true
        schema:
          type: string
          example: Maria 
          minLength: 3
          maxLength: 16
          pattern: '^.*?$'
      - name: banned_user
        in: path
        description: The name of the user we want to ban/unban
        required: true
        schema:
          type: string
          example: Luca
          minLength: 3
          maxLength: 16
          pattern: '^.*?$'
    put:
      tags:
        - banned
      operationId: banUser
      summary: Ban another user
      description: It allows the user to ban another one. If A ban B, B won't be able to see any information about A
      requestBody:
        required: true
        description: The name of the user we want to ban
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user_name'
      responses:
        "204":
          description: A user has been banned
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" }
          
    delete:
      tags:
        - banned
      operationId: unbanUser
      summary: Unban another user
      description: It allow the user to unban another one
      responses:
        "204":
          description: The unban was successfully.
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    get:
      tags:
        - banned
      operationId: getBan
      summary: Get the ban of a user
      description: It allow the user to know if there is a ban
      responses:
        "200":
            description: Return the info about the specific ban
            content:
              application/json:
                schema:
                  description: Describe the presence of a ban
                  type: object
                  properties:
                    isAlreadyBanned:
                      description: Describe the string that tell us if a ban is present
                      type: string
                      example: "True"
                      minLength: 3
                      maxLength: 16
                      pattern: '^.*?$'
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" }
      

  /profiles/{user_name}/followers/{following}:
    parameters:
      - name: user_name
        in: path
        description: Describe the user name
        required: true
        schema:
          type: string
          example: Maria 
          minLength: 3
          maxLength: 16
          pattern: '^.*?$'
      - name: following
        in: path
        description: The name of the user we want to follow/unfollow
        required: true
        schema:
          type: string
          example: Luca
          minLength: 3
          maxLength: 16
          pattern: '^.*?$'
    put:
      tags:
        - follower
      operationId: followUser
      summary: Follow another user
      description: It allows the user to follow another one
      requestBody:
        required: true
        description: The name of the user we want to follow
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user_name'
      responses:
        "204":
          description: A new follower has been added
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" }
                
    delete:
      tags:
        - follower
      operationId: unfollowUser
      summary: Unfollow another user
      description: It allow the user to unfollow another one
      responses:
        "204":
          description: The unfollow was successfully.
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /profiles/{user_name}/photos:
    parameters:
      - name: user_name
        in: path
        description: Describe the user name
        required: true
        schema:
          type: string
          example: Maria 
          minLength: 3
          maxLength: 16
          pattern: '^.*?$'
    post:
      tags:
        - photo
      operationId: uploadPhoto
      summary: upload a photo
      description: This method allows the user to upload a photo
      requestBody:
        required: true
        description: The image we want to upload
        content:
          image/png:
            schema:
              type: string
              format: binary
              example: "0000100100100111000101001110111000101010001110101"
              minLength: 20
              maxLength: 10000000
              pattern: '^.*?$'
              description: The photo the user want to upload
      responses:
        "201":
          description: The photo has been uploaded and its information is being returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/photo"
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    get:
      tags:
        - photo
      operationId: getMyStream
      summary: get my stream of photo
      description: The method allows the user to know his stream (in reverse chronological order)
      responses:
        "200":
          description: Return the photo stream
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/photo"
                minItems: 0
                maxItems: 50
                description: The photo stream
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" }
                
  /profiles/{user_name}/photos/{photo_id}:
    parameters:
      - name: user_name
        in: path
        description: Describe the user name
        required: true
        schema:
          type: string
          example: Maria
          minLength: 3
          maxLength: 16
          pattern: '^.*?$'
      - name: photo_id
        in: path
        description: Describe a photo ID
        required: true
        schema:
          type: string
          example: d732fhh
          minLength: 5
          maxLength: 100
          pattern: '^.*?$'
    delete:
      tags:
        - photo
      operationId: deletePhoto
      summary: delete a photo
      description: Allows you to delete a photo. Removal of an image will also remove likes and comments
      responses:
        "204":
          description: The deletion was successfully.
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    get:
      tags:
        - photo
      operationId: getPhoto
      summary: get a single photo
      description: Allows you to get a single photo
      responses:
        "200":
          description: Return the photo
          content:
            image/png:
              schema:
                type: string
                format: binary
                example: "0000100100100111000101001110111000101010001110101"
                minLength: 20
                maxLength: 10000000
                pattern: '^.*?$'
                description: The photo the user want

  /profiles/{user_name}/photos/{photo_id}/likes/{user_who_likes}: 
    parameters:
      - name: user_name
        in: path
        description: Describe the user name
        required: true
        schema:
          type: string
          example: Maria
          minLength: 3
          maxLength: 16
          pattern: '^.*?$'
      - name: photo_id
        in: path
        description: Describe a photo ID
        required: true
        schema:
          type: string
          example: d732fhh
          minLength: 5
          maxLength: 100
          pattern: '^.*?$'
      - name: user_who_likes
        in: path
        description: The name of the user we want to add/remove the like
        required: true
        schema:
          type: string
          example: Luca
          minLength: 3
          maxLength: 16
          pattern: '^.*?$'
    put:
      tags:
        - likes
      operationId: likePhoto
      summary: Like a photo
      description: Let the user like a photo
      requestBody:
        required: true
        description: The name of the user who liked
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user_name'
      responses:
        "204":
          description: The photo was liked
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" }
          
    delete:
      tags:
        - likes
      operationId: unlikePhoto
      summary: unlike a photo
      description: Allows you to unlike a photo
      responses:
        "204":
          description: The like deletion was successfully.
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    get:
      tags:
        - likes
      operationId: photoAlreadyLiked
      summary: check if the photo is already liked
      description: Allows you to know if the photo is already liked
      responses:
        "200":
            description: Return the info about a specific like
            content:
              application/json:
                schema:
                  description: Describe the presence of a like
                  type: object
                  properties:
                    isAlreadyLiked:
                      description: A string that describe the presence of a like
                      type: string
                      example: "True"
                      minLength: 3
                      maxLength: 16
                      pattern: '^.*?$'
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" }
                      
  /profiles/{user_name}/photos/{photo_id}/comments: 
    parameters:
      - name: user_name
        in: path
        description: Describe the user name
        required: true
        schema:
          type: string
          example: Maria
          minLength: 3
          maxLength: 16
          pattern: '^.*?$'
      - name: photo_id
        in: path
        description: Describe a photo ID
        required: true
        schema:
          type: string
          example: d732fhh
          minLength: 5
          maxLength: 100
          pattern: '^.*?$'
    post:
      tags:
        - comments
      operationId: commentPhoto
      summary: Comment a photo
      description: Let the user comment a photo
      requestBody:
        required: true
        description: The name and comment of the user who commented
        content:
          application/json:
            schema:
              type: object
              description: The object with the username and his comment
              properties:
                name:
                  type: string
                  example: Mario
                  description: The username of the person who commented
                  minLength: 5
                  maxLength: 100
                  pattern: '^.*?$'
                comment:
                  type: string
                  example: What a beatiful photo!
                  description: The comment of the person who commented
                  minLength: 1
                  maxLength: 200
                  pattern: '^.*?$'
      responses:
        "201":
          description: The photo was commented
          content:
            application/json:
              schema:
                type: object
                description: describe the id of the comment
                properties:
                  id:
                    type: integer
                    example: 301
                    description: The comment id
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" }
          
  /profiles/{user_name}/photos/{photo_id}/comments/{user_who_commented}/user_comments/{comment_id}: 
    parameters:
      - name: user_name
        in: path
        description: Describe the user name
        required: true
        schema:
          type: string
          example: Maria
          minLength: 3
          maxLength: 16
          pattern: '^.*?$'
      - name: photo_id
        in: path
        description: Describe a photo ID
        required: true
        schema:
          type: string
          example: d732fhh
          minLength: 5
          maxLength: 100
          pattern: '^.*?$'
      - name: user_who_commented
        in: path
        description: The name of the user we want to remove the comment
        required: true
        schema:
          type: string
          example: Luca 
          minLength: 3
          maxLength: 16
          pattern: '^.*?$'
      - name: comment_id
        in: path
        description: The id of the comment we want to delete
        required: true
        schema:
          type: integer
          example: 301
    delete:
      tags:
        - comments
      operationId: uncommentPhoto
      summary: uncomment a photo
      description: Allows you to uncomment a photo. Only authors can remove their comments.
      responses:
        "204":
          description: The comment deletion was successfully.
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" }
        

components:
  securitySchemes:
    bearerAuth: 
      type: http
      scheme: bearer
      bearerFormat: JWT 
  responses:
    BadRequest:
      description: The request was not complaint with the documentation
    InternalServerError:
      description: The server encountered an internal error
    Unauthorized:
      description: You do not have permission to do this operation
    Forbidden:
      description: You cannot do this operation
  schemas:
    profile:
      title: profile
      description: describe the user profile
      type: object
      properties:
          photos:
            type: array 
            items: 
              $ref: '#/components/schemas/photo'
            minItems: 0
            maxItems: 50
            description: The photos of the profile user
          photo_number:
            type: integer
            example: 5
            description: The number of the photo
          follower:
            type: array
            items:
              $ref: '#/components/schemas/user_name'
            minItems: 0
            maxItems: 50
            description: The follower of the profile user
          following:
            type: array
            items:
              $ref: '#/components/schemas/user_name'
            minItems: 0
            maxItems: 50
            description: The following of the profile user
    photo:
      title: photo
      description: description of a photo
      type: object
      properties:
        photo_id:
          type: string
          example: d732fhh
          minLength: 5
          maxLength: 100
          pattern: '^.*?$'
          description: The unique photo ID
        date: 
          type: string
          example: "2022-01-01"
          minLength: 10
          maxLength: 10
          format: date
          pattern: '^.*?$'
          description: The date when the photo was uploaded
        like_number:
          type: integer
          example: 100
          description: The number of photo's likes 
        comment_number:
          type: integer
          example: 50
          description: The number of photo's comments
        comments:
          description: Describe the comment's photo
          type: array
          minItems: 0
          maxItems: 50
          items:
            type: object
            properties:
              id:
                type: integer
                example: 301
                description: The id of the comment
              name:
                type: string
                example: Maria
                pattern: '^.*?$'
                minLength: 3
                maxLength: 16
                description: Describe the name of the user
              comment:
                type: string
                example: Nice Photo!!
                pattern: '^.*?$'
                minLength: 3
                maxLength: 100
                description: Describe the comment text
    user_name:
      title: user_name
      description: describe a user_name
      type: object
      properties:
        name:
          type: string
          example: Maria
          pattern: '^.*?$'
          minLength: 3
          maxLength: 16
          description: Describe the name of the user
    ID:
      title: ID
      description: describe an ID
      type: object
      properties:
        identifier:
          type: string
          example: "abcdef012345"
          minLength: 5
          maxLength: 100
          pattern: '^.*?$'
          description: Describe the ID returned after the login
security:
  - bearerAuth: []  
  