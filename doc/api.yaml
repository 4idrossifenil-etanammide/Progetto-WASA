openapi: 3.0.3
info:
  title:  WASA Photo
  description: |
    WASAPhoto REST APIs
  version: "1.0.0"
paths:
  /session:
    post:
      tags: ["login"]
      summary: Logs in the user
      description: |
        If the user does not exist, it will be created, and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/userName'
        required: true
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ID'
                
  /profile/{userName}:
    parameters:
      - name: userName
        in: path
        description: Describe the user name
        required: true
        schema:
          type: string
          example: Maria
    get:
      tags: ["profile"]
      operationId: getUserProfile
      summary: Get user profiles 
      description: A user can search other user profiles via username
      responses:
        "200":
          description: The user profile
          content:
            application/json:
              schema:
                 $ref: "#/components/schemas/profile"
        "404":
          description: User not found
          
    put:
      tags: ["profile"]
      operationId: setMyUserName
      summary: Set the user name
      description: Replace a name for the given user name
      requestBody:
        required: true
        description: The new name for the given user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userName'
      responses:
        "204":
          description: The username was successfully changed
        "404":
          description: User not found
          
  /profile/{userName}/banned:
    parameters:
      - name: userName
        in: path
        description: Describe the user name
        required: true
        schema:
          type: string
          example: Maria
    put:
      tags: ["banned"]
      operationId: banUser
      summary: Ban another user
      description: It allows the user to ban another one. If A ban B, B won't be able to see any information about A
      requestBody:
        required: true
        description: The name of the user we want to ban
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userName'
      responses:
        "204":
          description: A user has been banned
     
  /profile/{userName}/banned/{user}:
    parameters:
      - name: userName
        in: path
        description: Describe the user name
        required: true
        schema:
          type: string
          example: Maria 
      - name: user
        in: path
        description: The name of the user we want to unban
        required: true
        schema:
          type: string
          example: Luca
    delete:
      tags: ["banned"]
      operationId: unbanUser
      summary: Unban another user
      description: It allow the user to unban another one
      responses:
        "204":
          description: The unban was successfully.
        "404":
          description: User not found.

  /profile/{userName}/followers:
    parameters:
      - name: userName
        in: path
        description: Describe the user name
        required: true
        schema:
          type: string
          example: Maria 
    put:
      tags: ["follower"]
      operationId: followUser
      summary: Follow another user
      description: It allows the user to follow another one
      requestBody:
        required: true
        description: The name of the user we want to follow
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userName'
      responses:
        "204":
          description: A new follower has been added
                
  /profile/{userName}/followers/{user}:
    parameters:
      - name: userName
        in: path
        description: Describe the user name
        required: true
        schema:
          type: string
          example: Maria 
      - name: user
        in: path
        description: The name of the user we want to unfollow
        required: true
        schema:
          type: string
          example: Luca
    delete:
      tags: ["follower"]
      operationId: unfollowUser
      summary: Unfollow another user
      description: It allow the user to unfollow another one
      responses:
        "204":
          description: The unfollow was successfully.
        "404":
          description: User not found.

  /profile/{userName}/photos:
    parameters:
      - name: userName
        in: path
        description: Describe the user name
        required: true
        schema:
          type: string
          example: Maria 
    post:
      tags: ["photo"]
      operationId: uploadPhoto
      summary: upload a photo
      description: This method allows the user to upload a photo
      requestBody:
        required: true
        description: The image we want to upload
        content:
          image/png:
            schema:
              type: string
              format: binary
      responses:
        "201":
          description: The photo has been uploaded and its information is being returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/photo"
    get:
      tags: ["photo"]
      operationId: getMyStream
      summary: get my stream of photo
      description: The method allows the user to know his stream (in reverse chronological order)
      responses:
        "200":
          description: Return the photo stream
          content:
            application/json:
              schema:
                type: array
                items:
                  type: integer
                  format: binary
                  
  /profile/{userName}/photos/{photoID}:
    parameters:
      - name: userName
        in: path
        description: Describe the user name
        required: true
        schema:
          type: string
          example: Maria
      - name: photoID
        in: path
        description: Describe a photo ID
        required: true
        schema:
          type: string
          example: d732fhh
    delete:
      tags: ["photo"]
      operationId: deletePhoto
      summary: delete a photo
      description: Allows you to delete a photo. Removal of an image will also remove likes and comments
      responses:
        "204":
          description: The deletion was successfully.
        "404":
          description: Photo not found.

  /profile/{userName}/photos/{photoID}/likes: 
    parameters:
      - name: userName
        in: path
        description: Describe the user name
        required: true
        schema:
          type: string
          example: Maria
      - name: photoID
        in: path
        description: Describe a photo ID
        required: true
        schema:
          type: string
          example: d732fhh
    put:
      tags: ["likes"]
      operationId: likePhoto
      summary: Like a photo
      description: Let the user like a photo
      requestBody:
        required: true
        description: The name of the user who liked
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userName'
      responses:
        "204":
          description: The photo was liked
        "404":
          description: Photo not found
          
  /profile/{userName}/photos/{photoID}/likes/{user}: 
    parameters:
      - name: userName
        in: path
        description: Describe the user name
        required: true
        schema:
          type: string
          example: Maria
      - name: photoID
        in: path
        description: Describe a photo ID
        required: true
        schema:
          type: string
          example: d732fhh
      - name: user
        in: path
        description: The name of the user we want to remove the like
        required: true
        schema:
          type: string
          example: Luca
    delete:
      tags: ["likes"]
      operationId: unlikePhoto
      summary: unlike a photo
      description: Allows you to unlike a photo
      responses:
        "204":
          description: The like deletion was successfully.
        "404":
          description: Photo not found.
  
  /profile/{userName}/photos/{photoID}/comments: 
    parameters:
      - name: userName
        in: path
        description: Describe the user name
        required: true
        schema:
          type: string
          example: Maria
      - name: photoID
        in: path
        description: Describe a photo ID
        required: true
        schema:
          type: string
          example: d732fhh
    post:
      tags: ["comments"]
      operationId: commentPhoto
      summary: Comment a photo
      description: Let the user comment a photo
      requestBody:
        required: true
        description: The name and comment of the user who commented
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Mario
                comment:
                  type: string
                  example: What a beatiful photo!
      responses:
        "204":
          description: The photo was commented
        "404":
          description: Photo not found
          
  /profile/{userName}/photos/{photoID}/comments/{user}: 
    parameters:
      - name: userName
        in: path
        description: Describe the user name
        required: true
        schema:
          type: string
          example: Maria
      - name: photoID
        in: path
        description: Describe a photo ID
        required: true
        schema:
          type: string
          example: d732fhh
      - name: user
        in: path
        description: The name of the user we want to remove the comment
        required: true
        schema:
          type: string
          example: Luca 
    delete:
      tags: ["comments"]
      operationId: uncommentPhoto
      summary: uncomment a photo
      description: Allows you to uncomment a photo. Only authors can remove their comments.
      responses:
        "204":
          description: The comment deletion was successfully.
        "404":
          description: Photo not found.
        

components:
  securitySchemes:
    bearerAuth: 
      type: http
      scheme: bearer
      bearerFormat: JWT 
  schemas:
    profile:
      title: profile
      description: describe the user profile
      type: object
      properties:
          photos:
            type: array 
            items: 
              $ref: '#/components/schemas/photo'
          photoNumber:
            type: integer
            example: 5
          follower:
            type: array
            items:
              $ref: '#/components/schemas/userName'
          following:
            type: array
            items:
              $ref: '#/components/schemas/userName'
    photo:
      title: photo
      description: description of a photo
      type: object
      properties:
        photo:
          type: string
          format: binary
          description: represent the actual photo in a binary format
        photoID:
          type: string
          example: d732fhh
        date: 
          type: string
          example: "01/01/2022"
        likeNumber:
          type: integer
          example: 100
        commentNumber:
          type: integer
          example: 50
    userName:
      title: userName
      description: describe a userName
      type: object
      properties:
        name:
          type: string
          example: Maria
          pattern: 'ˆ.*?$'
          minLength: 3
          maxLength: 16
    ID:
      title: ID
      description: describe an ID
      type: object
      properties:
        identifier:
          type: string
          example: "abcdef012345"
security:
  - bearerAuth: []  
  